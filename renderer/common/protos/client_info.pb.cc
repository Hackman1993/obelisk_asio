// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_info.proto

#include "client_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR client_info::client_info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ability__)*/uint64_t{0u}
  , /*decltype(_impl_.os__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct client_infoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR client_infoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~client_infoDefaultTypeInternal() {}
  union {
    client_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 client_infoDefaultTypeInternal _client_info_default_instance_;
static ::_pb::Metadata file_level_metadata_client_5finfo_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_client_5finfo_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_client_5finfo_2eproto = nullptr;

const uint32_t TableStruct_client_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::client_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::client_info, _impl_.os__),
  PROTOBUF_FIELD_OFFSET(::client_info, _impl_.ability__),
  PROTOBUF_FIELD_OFFSET(::client_info, _impl_.client_id__),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::client_info)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_client_info_default_instance_._instance,
};

const char descriptor_table_protodef_client_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021client_info.proto\"J\n\013client_info\022\025\n\003os"
  "_\030\001 \001(\0162\010.OS_TYPE\022\020\n\010ability_\030\002 \001(\004\022\022\n\nc"
  "lient_id_\030\003 \001(\t*k\n\007OS_TYPE\022\023\n\017OS_TYPE_UN"
  "KNOWN\020\000\022\023\n\017OS_TYPE_WINDOWS\020\001\022\021\n\rOS_TYPE_"
  "LINUX\020\002\022\021\n\rOS_TYPE_MACOS\020\004\022\020\n\014OS_TYPE_UN"
  "IX\020\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_client_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_client_5finfo_2eproto = {
    false, false, 212, descriptor_table_protodef_client_5finfo_2eproto,
    "client_info.proto",
    &descriptor_table_client_5finfo_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_client_5finfo_2eproto::offsets,
    file_level_metadata_client_5finfo_2eproto, file_level_enum_descriptors_client_5finfo_2eproto,
    file_level_service_descriptors_client_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_client_5finfo_2eproto_getter() {
  return &descriptor_table_client_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_client_5finfo_2eproto(&descriptor_table_client_5finfo_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OS_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5finfo_2eproto);
  return file_level_enum_descriptors_client_5finfo_2eproto[0];
}
bool OS_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class client_info::_Internal {
 public:
};

client_info::client_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:client_info)
}
client_info::client_info(const client_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  client_info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id__){}
    , decltype(_impl_.ability__){}
    , decltype(_impl_.os__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id_().empty()) {
    _this->_impl_.client_id__.Set(from._internal_client_id_(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ability__, &from._impl_.ability__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.os__) -
    reinterpret_cast<char*>(&_impl_.ability__)) + sizeof(_impl_.os__));
  // @@protoc_insertion_point(copy_constructor:client_info)
}

inline void client_info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id__){}
    , decltype(_impl_.ability__){uint64_t{0u}}
    , decltype(_impl_.os__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_id__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_id__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_info::~client_info() {
  // @@protoc_insertion_point(destructor:client_info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void client_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id__.Destroy();
}

void client_info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void client_info::Clear() {
// @@protoc_insertion_point(message_clear_start:client_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id__.ClearToEmpty();
  ::memset(&_impl_.ability__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.os__) -
      reinterpret_cast<char*>(&_impl_.ability__)) + sizeof(_impl_.os__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .OS_TYPE os_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_os_(static_cast<::OS_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 ability_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ability__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_id_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_id_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "client_info.client_id_"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:client_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .OS_TYPE os_ = 1;
  if (this->_internal_os_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_os_(), target);
  }

  // uint64 ability_ = 2;
  if (this->_internal_ability_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ability_(), target);
  }

  // string client_id_ = 3;
  if (!this->_internal_client_id_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id_().data(), static_cast<int>(this->_internal_client_id_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "client_info.client_id_");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_id_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client_info)
  return target;
}

size_t client_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id_ = 3;
  if (!this->_internal_client_id_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id_());
  }

  // uint64 ability_ = 2;
  if (this->_internal_ability_() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ability_());
  }

  // .OS_TYPE os_ = 1;
  if (this->_internal_os_() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_os_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    client_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_info::GetClassData() const { return &_class_data_; }


void client_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<client_info*>(&to_msg);
  auto& from = static_cast<const client_info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:client_info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id_().empty()) {
    _this->_internal_set_client_id_(from._internal_client_id_());
  }
  if (from._internal_ability_() != 0) {
    _this->_internal_set_ability_(from._internal_ability_());
  }
  if (from._internal_os_() != 0) {
    _this->_internal_set_os_(from._internal_os_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_info::CopyFrom(const client_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_info::IsInitialized() const {
  return true;
}

void client_info::InternalSwap(client_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_id__, lhs_arena,
      &other->_impl_.client_id__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(client_info, _impl_.os__)
      + sizeof(client_info::_impl_.os__)
      - PROTOBUF_FIELD_OFFSET(client_info, _impl_.ability__)>(
          reinterpret_cast<char*>(&_impl_.ability__),
          reinterpret_cast<char*>(&other->_impl_.ability__));
}

::PROTOBUF_NAMESPACE_ID::Metadata client_info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5finfo_2eproto_getter, &descriptor_table_client_5finfo_2eproto_once,
      file_level_metadata_client_5finfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::client_info*
Arena::CreateMaybeMessage< ::client_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::client_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
