// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rendering_job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rendering_5fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rendering_5fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rendering_5fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rendering_5fjob_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rendering_5fjob_2eproto;
namespace proto {
namespace renderer {
class project_files;
struct project_filesDefaultTypeInternal;
extern project_filesDefaultTypeInternal _project_files_default_instance_;
class rendering_job;
struct rendering_jobDefaultTypeInternal;
extern rendering_jobDefaultTypeInternal _rendering_job_default_instance_;
class rendering_job_item;
struct rendering_job_itemDefaultTypeInternal;
extern rendering_job_itemDefaultTypeInternal _rendering_job_item_default_instance_;
}  // namespace renderer
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::renderer::project_files* Arena::CreateMaybeMessage<::proto::renderer::project_files>(Arena*);
template<> ::proto::renderer::rendering_job* Arena::CreateMaybeMessage<::proto::renderer::rendering_job>(Arena*);
template<> ::proto::renderer::rendering_job_item* Arena::CreateMaybeMessage<::proto::renderer::rendering_job_item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace renderer {

enum ControlPackageCategory : int {
  CLIENT_RENDERER_REGISTER = 0,
  CLIENT_RENDERER_JOB_FEEDBACK = 1,
  CLIENT_TRY_GET_RENDER_JOB = 3,
  CLIENT_QUERY_JOB_DETAIL = 4,
  ControlPackageCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlPackageCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlPackageCategory_IsValid(int value);
constexpr ControlPackageCategory ControlPackageCategory_MIN = CLIENT_RENDERER_REGISTER;
constexpr ControlPackageCategory ControlPackageCategory_MAX = CLIENT_QUERY_JOB_DETAIL;
constexpr int ControlPackageCategory_ARRAYSIZE = ControlPackageCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlPackageCategory_descriptor();
template<typename T>
inline const std::string& ControlPackageCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlPackageCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlPackageCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlPackageCategory_descriptor(), enum_t_value);
}
inline bool ControlPackageCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlPackageCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlPackageCategory>(
    ControlPackageCategory_descriptor(), name, value);
}
// ===================================================================

class rendering_job_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.renderer.rendering_job_item) */ {
 public:
  inline rendering_job_item() : rendering_job_item(nullptr) {}
  ~rendering_job_item() override;
  explicit PROTOBUF_CONSTEXPR rendering_job_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rendering_job_item(const rendering_job_item& from);
  rendering_job_item(rendering_job_item&& from) noexcept
    : rendering_job_item() {
    *this = ::std::move(from);
  }

  inline rendering_job_item& operator=(const rendering_job_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline rendering_job_item& operator=(rendering_job_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const rendering_job_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const rendering_job_item* internal_default_instance() {
    return reinterpret_cast<const rendering_job_item*>(
               &_rendering_job_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(rendering_job_item& a, rendering_job_item& b) {
    a.Swap(&b);
  }
  inline void Swap(rendering_job_item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rendering_job_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  rendering_job_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<rendering_job_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const rendering_job_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const rendering_job_item& from) {
    rendering_job_item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rendering_job_item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.renderer.rendering_job_item";
  }
  protected:
  explicit rendering_job_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkingDirFieldNumber = 2,
    kFrameFieldNumber = 1,
  };
  // string working_dir = 2;
  void clear_working_dir();
  const std::string& working_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_working_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_working_dir();
  PROTOBUF_NODISCARD std::string* release_working_dir();
  void set_allocated_working_dir(std::string* working_dir);
  private:
  const std::string& _internal_working_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_dir(const std::string& value);
  std::string* _internal_mutable_working_dir();
  public:

  // int32 frame = 1;
  void clear_frame();
  int32_t frame() const;
  void set_frame(int32_t value);
  private:
  int32_t _internal_frame() const;
  void _internal_set_frame(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.renderer.rendering_job_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_dir_;
    int32_t frame_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rendering_5fjob_2eproto;
};
// -------------------------------------------------------------------

class project_files final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.renderer.project_files) */ {
 public:
  inline project_files() : project_files(nullptr) {}
  ~project_files() override;
  explicit PROTOBUF_CONSTEXPR project_files(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  project_files(const project_files& from);
  project_files(project_files&& from) noexcept
    : project_files() {
    *this = ::std::move(from);
  }

  inline project_files& operator=(const project_files& from) {
    CopyFrom(from);
    return *this;
  }
  inline project_files& operator=(project_files&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const project_files& default_instance() {
    return *internal_default_instance();
  }
  static inline const project_files* internal_default_instance() {
    return reinterpret_cast<const project_files*>(
               &_project_files_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(project_files& a, project_files& b) {
    a.Swap(&b);
  }
  inline void Swap(project_files* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(project_files* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  project_files* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<project_files>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const project_files& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const project_files& from) {
    project_files::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(project_files* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.renderer.project_files";
  }
  protected:
  explicit project_files(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePathFieldNumber = 1,
    kDownloadUrlFieldNumber = 2,
  };
  // string relative_path = 1;
  void clear_relative_path();
  const std::string& relative_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_path();
  PROTOBUF_NODISCARD std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);
  private:
  const std::string& _internal_relative_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_path(const std::string& value);
  std::string* _internal_mutable_relative_path();
  public:

  // string download_url = 2;
  void clear_download_url();
  const std::string& download_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_download_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_download_url();
  PROTOBUF_NODISCARD std::string* release_download_url();
  void set_allocated_download_url(std::string* download_url);
  private:
  const std::string& _internal_download_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_download_url(const std::string& value);
  std::string* _internal_mutable_download_url();
  public:

  // @@protoc_insertion_point(class_scope:proto.renderer.project_files)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rendering_5fjob_2eproto;
};
// -------------------------------------------------------------------

class rendering_job final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.renderer.rendering_job) */ {
 public:
  inline rendering_job() : rendering_job(nullptr) {}
  ~rendering_job() override;
  explicit PROTOBUF_CONSTEXPR rendering_job(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rendering_job(const rendering_job& from);
  rendering_job(rendering_job&& from) noexcept
    : rendering_job() {
    *this = ::std::move(from);
  }

  inline rendering_job& operator=(const rendering_job& from) {
    CopyFrom(from);
    return *this;
  }
  inline rendering_job& operator=(rendering_job&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const rendering_job& default_instance() {
    return *internal_default_instance();
  }
  static inline const rendering_job* internal_default_instance() {
    return reinterpret_cast<const rendering_job*>(
               &_rendering_job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(rendering_job& a, rendering_job& b) {
    a.Swap(&b);
  }
  inline void Swap(rendering_job* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rendering_job* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  rendering_job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<rendering_job>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const rendering_job& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const rendering_job& from) {
    rendering_job::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rendering_job* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.renderer.rendering_job";
  }
  protected:
  explicit rendering_job(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
    kTokenFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kProjectFileFieldNumber = 5,
    kJobidFieldNumber = 3,
  };
  // repeated .proto.renderer.project_files files = 4;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::proto::renderer::project_files* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::renderer::project_files >*
      mutable_files();
  private:
  const ::proto::renderer::project_files& _internal_files(int index) const;
  ::proto::renderer::project_files* _internal_add_files();
  public:
  const ::proto::renderer::project_files& files(int index) const;
  ::proto::renderer::project_files* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::renderer::project_files >&
      files() const;

  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string project_id = 2;
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_NODISCARD std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // .proto.renderer.project_files projectFile = 5;
  bool has_projectfile() const;
  private:
  bool _internal_has_projectfile() const;
  public:
  void clear_projectfile();
  const ::proto::renderer::project_files& projectfile() const;
  PROTOBUF_NODISCARD ::proto::renderer::project_files* release_projectfile();
  ::proto::renderer::project_files* mutable_projectfile();
  void set_allocated_projectfile(::proto::renderer::project_files* projectfile);
  private:
  const ::proto::renderer::project_files& _internal_projectfile() const;
  ::proto::renderer::project_files* _internal_mutable_projectfile();
  public:
  void unsafe_arena_set_allocated_projectfile(
      ::proto::renderer::project_files* projectfile);
  ::proto::renderer::project_files* unsafe_arena_release_projectfile();

  // uint32 jobid = 3;
  void clear_jobid();
  uint32_t jobid() const;
  void set_jobid(uint32_t value);
  private:
  uint32_t _internal_jobid() const;
  void _internal_set_jobid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.renderer.rendering_job)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::renderer::project_files > files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
    ::proto::renderer::project_files* projectfile_;
    uint32_t jobid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rendering_5fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rendering_job_item

// int32 frame = 1;
inline void rendering_job_item::clear_frame() {
  _impl_.frame_ = 0;
}
inline int32_t rendering_job_item::_internal_frame() const {
  return _impl_.frame_;
}
inline int32_t rendering_job_item::frame() const {
  // @@protoc_insertion_point(field_get:proto.renderer.rendering_job_item.frame)
  return _internal_frame();
}
inline void rendering_job_item::_internal_set_frame(int32_t value) {
  
  _impl_.frame_ = value;
}
inline void rendering_job_item::set_frame(int32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:proto.renderer.rendering_job_item.frame)
}

// string working_dir = 2;
inline void rendering_job_item::clear_working_dir() {
  _impl_.working_dir_.ClearToEmpty();
}
inline const std::string& rendering_job_item::working_dir() const {
  // @@protoc_insertion_point(field_get:proto.renderer.rendering_job_item.working_dir)
  return _internal_working_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rendering_job_item::set_working_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.working_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.renderer.rendering_job_item.working_dir)
}
inline std::string* rendering_job_item::mutable_working_dir() {
  std::string* _s = _internal_mutable_working_dir();
  // @@protoc_insertion_point(field_mutable:proto.renderer.rendering_job_item.working_dir)
  return _s;
}
inline const std::string& rendering_job_item::_internal_working_dir() const {
  return _impl_.working_dir_.Get();
}
inline void rendering_job_item::_internal_set_working_dir(const std::string& value) {
  
  _impl_.working_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* rendering_job_item::_internal_mutable_working_dir() {
  
  return _impl_.working_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* rendering_job_item::release_working_dir() {
  // @@protoc_insertion_point(field_release:proto.renderer.rendering_job_item.working_dir)
  return _impl_.working_dir_.Release();
}
inline void rendering_job_item::set_allocated_working_dir(std::string* working_dir) {
  if (working_dir != nullptr) {
    
  } else {
    
  }
  _impl_.working_dir_.SetAllocated(working_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.working_dir_.IsDefault()) {
    _impl_.working_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.renderer.rendering_job_item.working_dir)
}

// -------------------------------------------------------------------

// project_files

// string relative_path = 1;
inline void project_files::clear_relative_path() {
  _impl_.relative_path_.ClearToEmpty();
}
inline const std::string& project_files::relative_path() const {
  // @@protoc_insertion_point(field_get:proto.renderer.project_files.relative_path)
  return _internal_relative_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void project_files::set_relative_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relative_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.renderer.project_files.relative_path)
}
inline std::string* project_files::mutable_relative_path() {
  std::string* _s = _internal_mutable_relative_path();
  // @@protoc_insertion_point(field_mutable:proto.renderer.project_files.relative_path)
  return _s;
}
inline const std::string& project_files::_internal_relative_path() const {
  return _impl_.relative_path_.Get();
}
inline void project_files::_internal_set_relative_path(const std::string& value) {
  
  _impl_.relative_path_.Set(value, GetArenaForAllocation());
}
inline std::string* project_files::_internal_mutable_relative_path() {
  
  return _impl_.relative_path_.Mutable(GetArenaForAllocation());
}
inline std::string* project_files::release_relative_path() {
  // @@protoc_insertion_point(field_release:proto.renderer.project_files.relative_path)
  return _impl_.relative_path_.Release();
}
inline void project_files::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    
  } else {
    
  }
  _impl_.relative_path_.SetAllocated(relative_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relative_path_.IsDefault()) {
    _impl_.relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.renderer.project_files.relative_path)
}

// string download_url = 2;
inline void project_files::clear_download_url() {
  _impl_.download_url_.ClearToEmpty();
}
inline const std::string& project_files::download_url() const {
  // @@protoc_insertion_point(field_get:proto.renderer.project_files.download_url)
  return _internal_download_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void project_files::set_download_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.download_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.renderer.project_files.download_url)
}
inline std::string* project_files::mutable_download_url() {
  std::string* _s = _internal_mutable_download_url();
  // @@protoc_insertion_point(field_mutable:proto.renderer.project_files.download_url)
  return _s;
}
inline const std::string& project_files::_internal_download_url() const {
  return _impl_.download_url_.Get();
}
inline void project_files::_internal_set_download_url(const std::string& value) {
  
  _impl_.download_url_.Set(value, GetArenaForAllocation());
}
inline std::string* project_files::_internal_mutable_download_url() {
  
  return _impl_.download_url_.Mutable(GetArenaForAllocation());
}
inline std::string* project_files::release_download_url() {
  // @@protoc_insertion_point(field_release:proto.renderer.project_files.download_url)
  return _impl_.download_url_.Release();
}
inline void project_files::set_allocated_download_url(std::string* download_url) {
  if (download_url != nullptr) {
    
  } else {
    
  }
  _impl_.download_url_.SetAllocated(download_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.download_url_.IsDefault()) {
    _impl_.download_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.renderer.project_files.download_url)
}

// -------------------------------------------------------------------

// rendering_job

// string token = 1;
inline void rendering_job::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& rendering_job::token() const {
  // @@protoc_insertion_point(field_get:proto.renderer.rendering_job.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rendering_job::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.renderer.rendering_job.token)
}
inline std::string* rendering_job::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:proto.renderer.rendering_job.token)
  return _s;
}
inline const std::string& rendering_job::_internal_token() const {
  return _impl_.token_.Get();
}
inline void rendering_job::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* rendering_job::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* rendering_job::release_token() {
  // @@protoc_insertion_point(field_release:proto.renderer.rendering_job.token)
  return _impl_.token_.Release();
}
inline void rendering_job::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.renderer.rendering_job.token)
}

// string project_id = 2;
inline void rendering_job::clear_project_id() {
  _impl_.project_id_.ClearToEmpty();
}
inline const std::string& rendering_job::project_id() const {
  // @@protoc_insertion_point(field_get:proto.renderer.rendering_job.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rendering_job::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.project_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.renderer.rendering_job.project_id)
}
inline std::string* rendering_job::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:proto.renderer.rendering_job.project_id)
  return _s;
}
inline const std::string& rendering_job::_internal_project_id() const {
  return _impl_.project_id_.Get();
}
inline void rendering_job::_internal_set_project_id(const std::string& value) {
  
  _impl_.project_id_.Set(value, GetArenaForAllocation());
}
inline std::string* rendering_job::_internal_mutable_project_id() {
  
  return _impl_.project_id_.Mutable(GetArenaForAllocation());
}
inline std::string* rendering_job::release_project_id() {
  // @@protoc_insertion_point(field_release:proto.renderer.rendering_job.project_id)
  return _impl_.project_id_.Release();
}
inline void rendering_job::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  _impl_.project_id_.SetAllocated(project_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.project_id_.IsDefault()) {
    _impl_.project_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.renderer.rendering_job.project_id)
}

// uint32 jobid = 3;
inline void rendering_job::clear_jobid() {
  _impl_.jobid_ = 0u;
}
inline uint32_t rendering_job::_internal_jobid() const {
  return _impl_.jobid_;
}
inline uint32_t rendering_job::jobid() const {
  // @@protoc_insertion_point(field_get:proto.renderer.rendering_job.jobid)
  return _internal_jobid();
}
inline void rendering_job::_internal_set_jobid(uint32_t value) {
  
  _impl_.jobid_ = value;
}
inline void rendering_job::set_jobid(uint32_t value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:proto.renderer.rendering_job.jobid)
}

// repeated .proto.renderer.project_files files = 4;
inline int rendering_job::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int rendering_job::files_size() const {
  return _internal_files_size();
}
inline void rendering_job::clear_files() {
  _impl_.files_.Clear();
}
inline ::proto::renderer::project_files* rendering_job::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.renderer.rendering_job.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::renderer::project_files >*
rendering_job::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.renderer.rendering_job.files)
  return &_impl_.files_;
}
inline const ::proto::renderer::project_files& rendering_job::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::proto::renderer::project_files& rendering_job::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.renderer.rendering_job.files)
  return _internal_files(index);
}
inline ::proto::renderer::project_files* rendering_job::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::proto::renderer::project_files* rendering_job::add_files() {
  ::proto::renderer::project_files* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:proto.renderer.rendering_job.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::renderer::project_files >&
rendering_job::files() const {
  // @@protoc_insertion_point(field_list:proto.renderer.rendering_job.files)
  return _impl_.files_;
}

// .proto.renderer.project_files projectFile = 5;
inline bool rendering_job::_internal_has_projectfile() const {
  return this != internal_default_instance() && _impl_.projectfile_ != nullptr;
}
inline bool rendering_job::has_projectfile() const {
  return _internal_has_projectfile();
}
inline void rendering_job::clear_projectfile() {
  if (GetArenaForAllocation() == nullptr && _impl_.projectfile_ != nullptr) {
    delete _impl_.projectfile_;
  }
  _impl_.projectfile_ = nullptr;
}
inline const ::proto::renderer::project_files& rendering_job::_internal_projectfile() const {
  const ::proto::renderer::project_files* p = _impl_.projectfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::renderer::project_files&>(
      ::proto::renderer::_project_files_default_instance_);
}
inline const ::proto::renderer::project_files& rendering_job::projectfile() const {
  // @@protoc_insertion_point(field_get:proto.renderer.rendering_job.projectFile)
  return _internal_projectfile();
}
inline void rendering_job::unsafe_arena_set_allocated_projectfile(
    ::proto::renderer::project_files* projectfile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectfile_);
  }
  _impl_.projectfile_ = projectfile;
  if (projectfile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.renderer.rendering_job.projectFile)
}
inline ::proto::renderer::project_files* rendering_job::release_projectfile() {
  
  ::proto::renderer::project_files* temp = _impl_.projectfile_;
  _impl_.projectfile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::renderer::project_files* rendering_job::unsafe_arena_release_projectfile() {
  // @@protoc_insertion_point(field_release:proto.renderer.rendering_job.projectFile)
  
  ::proto::renderer::project_files* temp = _impl_.projectfile_;
  _impl_.projectfile_ = nullptr;
  return temp;
}
inline ::proto::renderer::project_files* rendering_job::_internal_mutable_projectfile() {
  
  if (_impl_.projectfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::renderer::project_files>(GetArenaForAllocation());
    _impl_.projectfile_ = p;
  }
  return _impl_.projectfile_;
}
inline ::proto::renderer::project_files* rendering_job::mutable_projectfile() {
  ::proto::renderer::project_files* _msg = _internal_mutable_projectfile();
  // @@protoc_insertion_point(field_mutable:proto.renderer.rendering_job.projectFile)
  return _msg;
}
inline void rendering_job::set_allocated_projectfile(::proto::renderer::project_files* projectfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.projectfile_;
  }
  if (projectfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(projectfile);
    if (message_arena != submessage_arena) {
      projectfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectfile, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectfile_ = projectfile;
  // @@protoc_insertion_point(field_set_allocated:proto.renderer.rendering_job.projectFile)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace renderer
}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::renderer::ControlPackageCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::renderer::ControlPackageCategory>() {
  return ::proto::renderer::ControlPackageCategory_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rendering_5fjob_2eproto
