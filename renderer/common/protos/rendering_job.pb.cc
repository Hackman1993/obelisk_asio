// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rendering_job.proto

#include "rendering_job.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RenderingJobItem::RenderingJobItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.working_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenderingJobItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderingJobItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderingJobItemDefaultTypeInternal() {}
  union {
    RenderingJobItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderingJobItemDefaultTypeInternal _RenderingJobItem_default_instance_;
PROTOBUF_CONSTEXPR ProjectFiles::ProjectFiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relative_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.download_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectFilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectFilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectFilesDefaultTypeInternal() {}
  union {
    ProjectFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectFilesDefaultTypeInternal _ProjectFiles_default_instance_;
PROTOBUF_CONSTEXPR RenderingJob::RenderingJob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectfile_)*/nullptr
  , /*decltype(_impl_.project_id_)*/0u
  , /*decltype(_impl_.jobid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenderingJobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderingJobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderingJobDefaultTypeInternal() {}
  union {
    RenderingJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderingJobDefaultTypeInternal _RenderingJob_default_instance_;
static ::_pb::Metadata file_level_metadata_rendering_5fjob_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rendering_5fjob_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rendering_5fjob_2eproto = nullptr;

const uint32_t TableStruct_rendering_5fjob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RenderingJobItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RenderingJobItem, _impl_.frame_),
  PROTOBUF_FIELD_OFFSET(::RenderingJobItem, _impl_.working_dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectFiles, _impl_.relative_path_),
  PROTOBUF_FIELD_OFFSET(::ProjectFiles, _impl_.download_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RenderingJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RenderingJob, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::RenderingJob, _impl_.project_id_),
  PROTOBUF_FIELD_OFFSET(::RenderingJob, _impl_.jobid_),
  PROTOBUF_FIELD_OFFSET(::RenderingJob, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::RenderingJob, _impl_.projectfile_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RenderingJobItem)},
  { 8, -1, -1, sizeof(::ProjectFiles)},
  { 16, -1, -1, sizeof(::RenderingJob)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RenderingJobItem_default_instance_._instance,
  &::_ProjectFiles_default_instance_._instance,
  &::_RenderingJob_default_instance_._instance,
};

const char descriptor_table_protodef_rendering_5fjob_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023rendering_job.proto\"6\n\020RenderingJobIte"
  "m\022\r\n\005frame\030\001 \001(\005\022\023\n\013working_dir\030\002 \001(\t\";\n"
  "\014ProjectFiles\022\025\n\rrelative_path\030\001 \001(\t\022\024\n\014"
  "download_url\030\002 \001(\t\"\202\001\n\014RenderingJob\022\r\n\005t"
  "oken\030\001 \001(\t\022\022\n\nproject_id\030\002 \001(\r\022\r\n\005jobid\030"
  "\003 \001(\r\022\034\n\005files\030\004 \003(\0132\r.ProjectFiles\022\"\n\013p"
  "rojectFile\030\005 \001(\0132\r.ProjectFiles*\224\001\n\026Cont"
  "rolPackageCategory\022\034\n\030CLIENT_RENDERER_RE"
  "GISTER\020\000\022 \n\034CLIENT_RENDERER_JOB_FEEDBACK"
  "\020\001\022\035\n\031CLIENT_TRY_GET_RENDER_JOB\020\003\022\033\n\027CLI"
  "ENT_QUERY_JOB_DETAIL\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rendering_5fjob_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rendering_5fjob_2eproto = {
    false, false, 430, descriptor_table_protodef_rendering_5fjob_2eproto,
    "rendering_job.proto",
    &descriptor_table_rendering_5fjob_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_rendering_5fjob_2eproto::offsets,
    file_level_metadata_rendering_5fjob_2eproto, file_level_enum_descriptors_rendering_5fjob_2eproto,
    file_level_service_descriptors_rendering_5fjob_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rendering_5fjob_2eproto_getter() {
  return &descriptor_table_rendering_5fjob_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rendering_5fjob_2eproto(&descriptor_table_rendering_5fjob_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlPackageCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rendering_5fjob_2eproto);
  return file_level_enum_descriptors_rendering_5fjob_2eproto[0];
}
bool ControlPackageCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RenderingJobItem::_Internal {
 public:
};

RenderingJobItem::RenderingJobItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RenderingJobItem)
}
RenderingJobItem::RenderingJobItem(const RenderingJobItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenderingJobItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.working_dir_){}
    , decltype(_impl_.frame_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.working_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.working_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_working_dir().empty()) {
    _this->_impl_.working_dir_.Set(from._internal_working_dir(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.frame_ = from._impl_.frame_;
  // @@protoc_insertion_point(copy_constructor:RenderingJobItem)
}

inline void RenderingJobItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.working_dir_){}
    , decltype(_impl_.frame_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.working_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.working_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenderingJobItem::~RenderingJobItem() {
  // @@protoc_insertion_point(destructor:RenderingJobItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderingJobItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.working_dir_.Destroy();
}

void RenderingJobItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderingJobItem::Clear() {
// @@protoc_insertion_point(message_clear_start:RenderingJobItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.working_dir_.ClearToEmpty();
  _impl_.frame_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderingJobItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string working_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_working_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RenderingJobItem.working_dir"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenderingJobItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenderingJobItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame = 1;
  if (this->_internal_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame(), target);
  }

  // string working_dir = 2;
  if (!this->_internal_working_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_working_dir().data(), static_cast<int>(this->_internal_working_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RenderingJobItem.working_dir");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_working_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenderingJobItem)
  return target;
}

size_t RenderingJobItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenderingJobItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string working_dir = 2;
  if (!this->_internal_working_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_working_dir());
  }

  // int32 frame = 1;
  if (this->_internal_frame() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderingJobItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenderingJobItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderingJobItem::GetClassData() const { return &_class_data_; }


void RenderingJobItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenderingJobItem*>(&to_msg);
  auto& from = static_cast<const RenderingJobItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RenderingJobItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_working_dir().empty()) {
    _this->_internal_set_working_dir(from._internal_working_dir());
  }
  if (from._internal_frame() != 0) {
    _this->_internal_set_frame(from._internal_frame());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderingJobItem::CopyFrom(const RenderingJobItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenderingJobItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderingJobItem::IsInitialized() const {
  return true;
}

void RenderingJobItem::InternalSwap(RenderingJobItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.working_dir_, lhs_arena,
      &other->_impl_.working_dir_, rhs_arena
  );
  swap(_impl_.frame_, other->_impl_.frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderingJobItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rendering_5fjob_2eproto_getter, &descriptor_table_rendering_5fjob_2eproto_once,
      file_level_metadata_rendering_5fjob_2eproto[0]);
}

// ===================================================================

class ProjectFiles::_Internal {
 public:
};

ProjectFiles::ProjectFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectFiles)
}
ProjectFiles::ProjectFiles(const ProjectFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectFiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relative_path_){}
    , decltype(_impl_.download_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.relative_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relative_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relative_path().empty()) {
    _this->_impl_.relative_path_.Set(from._internal_relative_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.download_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.download_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_download_url().empty()) {
    _this->_impl_.download_url_.Set(from._internal_download_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ProjectFiles)
}

inline void ProjectFiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relative_path_){}
    , decltype(_impl_.download_url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.relative_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relative_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.download_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.download_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProjectFiles::~ProjectFiles() {
  // @@protoc_insertion_point(destructor:ProjectFiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relative_path_.Destroy();
  _impl_.download_url_.Destroy();
}

void ProjectFiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectFiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relative_path_.ClearToEmpty();
  _impl_.download_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectFiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string relative_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relative_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectFiles.relative_path"));
        } else
          goto handle_unusual;
        continue;
      // string download_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_download_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectFiles.download_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectFiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectFiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string relative_path = 1;
  if (!this->_internal_relative_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relative_path().data(), static_cast<int>(this->_internal_relative_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectFiles.relative_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relative_path(), target);
  }

  // string download_url = 2;
  if (!this->_internal_download_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_download_url().data(), static_cast<int>(this->_internal_download_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectFiles.download_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_download_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectFiles)
  return target;
}

size_t ProjectFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectFiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string relative_path = 1;
  if (!this->_internal_relative_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relative_path());
  }

  // string download_url = 2;
  if (!this->_internal_download_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_download_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectFiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectFiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectFiles::GetClassData() const { return &_class_data_; }


void ProjectFiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectFiles*>(&to_msg);
  auto& from = static_cast<const ProjectFiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectFiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_relative_path().empty()) {
    _this->_internal_set_relative_path(from._internal_relative_path());
  }
  if (!from._internal_download_url().empty()) {
    _this->_internal_set_download_url(from._internal_download_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectFiles::CopyFrom(const ProjectFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectFiles::IsInitialized() const {
  return true;
}

void ProjectFiles::InternalSwap(ProjectFiles* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relative_path_, lhs_arena,
      &other->_impl_.relative_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.download_url_, lhs_arena,
      &other->_impl_.download_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectFiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rendering_5fjob_2eproto_getter, &descriptor_table_rendering_5fjob_2eproto_once,
      file_level_metadata_rendering_5fjob_2eproto[1]);
}

// ===================================================================

class RenderingJob::_Internal {
 public:
  static const ::ProjectFiles& projectfile(const RenderingJob* msg);
};

const ::ProjectFiles&
RenderingJob::_Internal::projectfile(const RenderingJob* msg) {
  return *msg->_impl_.projectfile_;
}
RenderingJob::RenderingJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RenderingJob)
}
RenderingJob::RenderingJob(const RenderingJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenderingJob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.token_){}
    , decltype(_impl_.projectfile_){nullptr}
    , decltype(_impl_.project_id_){}
    , decltype(_impl_.jobid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_projectfile()) {
    _this->_impl_.projectfile_ = new ::ProjectFiles(*from._impl_.projectfile_);
  }
  ::memcpy(&_impl_.project_id_, &from._impl_.project_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.jobid_) -
    reinterpret_cast<char*>(&_impl_.project_id_)) + sizeof(_impl_.jobid_));
  // @@protoc_insertion_point(copy_constructor:RenderingJob)
}

inline void RenderingJob::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , decltype(_impl_.token_){}
    , decltype(_impl_.projectfile_){nullptr}
    , decltype(_impl_.project_id_){0u}
    , decltype(_impl_.jobid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenderingJob::~RenderingJob() {
  // @@protoc_insertion_point(destructor:RenderingJob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderingJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.projectfile_;
}

void RenderingJob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderingJob::Clear() {
// @@protoc_insertion_point(message_clear_start:RenderingJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _impl_.token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.projectfile_ != nullptr) {
    delete _impl_.projectfile_;
  }
  _impl_.projectfile_ = nullptr;
  ::memset(&_impl_.project_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.jobid_) -
      reinterpret_cast<char*>(&_impl_.project_id_)) + sizeof(_impl_.jobid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderingJob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RenderingJob.token"));
        } else
          goto handle_unusual;
        continue;
      // uint32 project_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 jobid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.jobid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProjectFiles files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ProjectFiles projectFile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectfile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenderingJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenderingJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RenderingJob.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // uint32 project_id = 2;
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_project_id(), target);
  }

  // uint32 jobid = 3;
  if (this->_internal_jobid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_jobid(), target);
  }

  // repeated .ProjectFiles files = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ProjectFiles projectFile = 5;
  if (this->_internal_has_projectfile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::projectfile(this),
        _Internal::projectfile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenderingJob)
  return target;
}

size_t RenderingJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenderingJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProjectFiles files = 4;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .ProjectFiles projectFile = 5;
  if (this->_internal_has_projectfile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectfile_);
  }

  // uint32 project_id = 2;
  if (this->_internal_project_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_project_id());
  }

  // uint32 jobid = 3;
  if (this->_internal_jobid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_jobid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderingJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenderingJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderingJob::GetClassData() const { return &_class_data_; }


void RenderingJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenderingJob*>(&to_msg);
  auto& from = static_cast<const RenderingJob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RenderingJob)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_has_projectfile()) {
    _this->_internal_mutable_projectfile()->::ProjectFiles::MergeFrom(
        from._internal_projectfile());
  }
  if (from._internal_project_id() != 0) {
    _this->_internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_jobid() != 0) {
    _this->_internal_set_jobid(from._internal_jobid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderingJob::CopyFrom(const RenderingJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenderingJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderingJob::IsInitialized() const {
  return true;
}

void RenderingJob::InternalSwap(RenderingJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderingJob, _impl_.jobid_)
      + sizeof(RenderingJob::_impl_.jobid_)
      - PROTOBUF_FIELD_OFFSET(RenderingJob, _impl_.projectfile_)>(
          reinterpret_cast<char*>(&_impl_.projectfile_),
          reinterpret_cast<char*>(&other->_impl_.projectfile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderingJob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rendering_5fjob_2eproto_getter, &descriptor_table_rendering_5fjob_2eproto_once,
      file_level_metadata_rendering_5fjob_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RenderingJobItem*
Arena::CreateMaybeMessage< ::RenderingJobItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenderingJobItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectFiles*
Arena::CreateMaybeMessage< ::ProjectFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::RenderingJob*
Arena::CreateMaybeMessage< ::RenderingJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenderingJob >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
