// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5finfo_2eproto;
class client_info;
struct client_infoDefaultTypeInternal;
extern client_infoDefaultTypeInternal _client_info_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::client_info* Arena::CreateMaybeMessage<::client_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum OS_TYPE : int {
  OS_TYPE_UNKNOWN = 0,
  OS_TYPE_WINDOWS = 1,
  OS_TYPE_LINUX = 2,
  OS_TYPE_MACOS = 4,
  OS_TYPE_UNIX = 8,
  OS_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OS_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OS_TYPE_IsValid(int value);
constexpr OS_TYPE OS_TYPE_MIN = OS_TYPE_UNKNOWN;
constexpr OS_TYPE OS_TYPE_MAX = OS_TYPE_UNIX;
constexpr int OS_TYPE_ARRAYSIZE = OS_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OS_TYPE_descriptor();
template<typename T>
inline const std::string& OS_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OS_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OS_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OS_TYPE_descriptor(), enum_t_value);
}
inline bool OS_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OS_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OS_TYPE>(
    OS_TYPE_descriptor(), name, value);
}
// ===================================================================

class client_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_info) */ {
 public:
  inline client_info() : client_info(nullptr) {}
  ~client_info() override;
  explicit PROTOBUF_CONSTEXPR client_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_info(const client_info& from);
  client_info(client_info&& from) noexcept
    : client_info() {
    *this = ::std::move(from);
  }

  inline client_info& operator=(const client_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_info& operator=(client_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_info* internal_default_instance() {
    return reinterpret_cast<const client_info*>(
               &_client_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(client_info& a, client_info& b) {
    a.Swap(&b);
  }
  inline void Swap(client_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const client_info& from) {
    client_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client_info";
  }
  protected:
  explicit client_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 3,
    kAbilityFieldNumber = 2,
    kOsFieldNumber = 1,
  };
  // string client_id_ = 3;
  void clear_client_id_();
  const std::string& client_id_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id_();
  PROTOBUF_NODISCARD std::string* release_client_id_();
  void set_allocated_client_id_(std::string* client_id_);
  private:
  const std::string& _internal_client_id_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id_(const std::string& value);
  std::string* _internal_mutable_client_id_();
  public:

  // uint64 ability_ = 2;
  void clear_ability_();
  uint64_t ability_() const;
  void set_ability_(uint64_t value);
  private:
  uint64_t _internal_ability_() const;
  void _internal_set_ability_(uint64_t value);
  public:

  // .OS_TYPE os_ = 1;
  void clear_os_();
  ::OS_TYPE os_() const;
  void set_os_(::OS_TYPE value);
  private:
  ::OS_TYPE _internal_os_() const;
  void _internal_set_os_(::OS_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:client_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id__;
    uint64_t ability__;
    int os__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// client_info

// .OS_TYPE os_ = 1;
inline void client_info::clear_os_() {
  _impl_.os__ = 0;
}
inline ::OS_TYPE client_info::_internal_os_() const {
  return static_cast< ::OS_TYPE >(_impl_.os__);
}
inline ::OS_TYPE client_info::os_() const {
  // @@protoc_insertion_point(field_get:client_info.os_)
  return _internal_os_();
}
inline void client_info::_internal_set_os_(::OS_TYPE value) {
  
  _impl_.os__ = value;
}
inline void client_info::set_os_(::OS_TYPE value) {
  _internal_set_os_(value);
  // @@protoc_insertion_point(field_set:client_info.os_)
}

// uint64 ability_ = 2;
inline void client_info::clear_ability_() {
  _impl_.ability__ = uint64_t{0u};
}
inline uint64_t client_info::_internal_ability_() const {
  return _impl_.ability__;
}
inline uint64_t client_info::ability_() const {
  // @@protoc_insertion_point(field_get:client_info.ability_)
  return _internal_ability_();
}
inline void client_info::_internal_set_ability_(uint64_t value) {
  
  _impl_.ability__ = value;
}
inline void client_info::set_ability_(uint64_t value) {
  _internal_set_ability_(value);
  // @@protoc_insertion_point(field_set:client_info.ability_)
}

// string client_id_ = 3;
inline void client_info::clear_client_id_() {
  _impl_.client_id__.ClearToEmpty();
}
inline const std::string& client_info::client_id_() const {
  // @@protoc_insertion_point(field_get:client_info.client_id_)
  return _internal_client_id_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_info::set_client_id_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:client_info.client_id_)
}
inline std::string* client_info::mutable_client_id_() {
  std::string* _s = _internal_mutable_client_id_();
  // @@protoc_insertion_point(field_mutable:client_info.client_id_)
  return _s;
}
inline const std::string& client_info::_internal_client_id_() const {
  return _impl_.client_id__.Get();
}
inline void client_info::_internal_set_client_id_(const std::string& value) {
  
  _impl_.client_id__.Set(value, GetArenaForAllocation());
}
inline std::string* client_info::_internal_mutable_client_id_() {
  
  return _impl_.client_id__.Mutable(GetArenaForAllocation());
}
inline std::string* client_info::release_client_id_() {
  // @@protoc_insertion_point(field_release:client_info.client_id_)
  return _impl_.client_id__.Release();
}
inline void client_info::set_allocated_client_id_(std::string* client_id_) {
  if (client_id_ != nullptr) {
    
  } else {
    
  }
  _impl_.client_id__.SetAllocated(client_id_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id__.IsDefault()) {
    _impl_.client_id__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:client_info.client_id_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OS_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OS_TYPE>() {
  return ::OS_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5finfo_2eproto
